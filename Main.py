import telebot
from telebot import types
import json
import random
import os


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
bot = telebot.TeleBot("7008306835:AAGZZSS7XqZDc1sO4M2oI8wUe37AdwtDUWY")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_results = {}

texts = {
    "ru": {
        "welcome": "<b>–ü—Ä–∏–≤–µ—Ç, {name}!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "choose_language": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "choose_course": "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        "choose_test_1": "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è 1 –∫—É—Ä—Å–∞:",
        "choose_test_2": "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è 2 –∫—É—Ä—Å–∞:",
        "choose_test_3": "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è 3 –∫—É—Ä—Å–∞:",
    },
    "uz": {
        "welcome": "<b>Salom, {name}!</b>\n\nTilni tanlang:",
        "choose_language": "Tilni tanlang:",
        "choose_course": "Testni boshlash uchun kursni tanlang üëá",
        "choose_test_1": "1 kurs uchun testni tanlang:",
        "choose_test_2": "2 kurs uchun testni tanlang:",
        "choose_test_3": "3 kurs uchun testni tanlang:",
    }
}


current_language = "ru"

channel_id = "@testttatf" 

def is_subscribed(chat_id):
    try:
        member = bot.get_chat_member(chat_id=channel_id, user_id=chat_id)
        if member.status != 'left':
            return True
        else:
            return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    if is_subscribed(message.chat.id):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        ru_btn = types.KeyboardButton("–†—É—Å—Å–∫–∏–π")
        uz_btn = types.KeyboardButton("O'zbek")
        markup.add(ru_btn, uz_btn)
        bot.send_message(
            chat_id=message.chat.id,
            text=texts[current_language]["welcome"].format(name=message.chat.first_name),
            parse_mode="HTML",
            reply_markup=markup
        )
    else:
        bot.send_message(
            chat_id=message.chat.id,
            text=f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {channel_id}, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞."
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@bot.message_handler(func=lambda message: message.text in ["–†—É—Å—Å–∫–∏–π", "O'zbek"])
def set_language(message):
    global current_language
    if message.text == "–†—É—Å—Å–∫–∏–π":
        current_language = "ru"
    elif message.text == "O'zbek":
        current_language = "uz"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    year1_btn = types.KeyboardButton("1 kurs" if current_language == "uz" else "1 –∫—É—Ä—Å")
    year2_btn = types.KeyboardButton("2 kurs" if current_language == "uz" else "2 –∫—É—Ä—Å")
    year3_btn = types.KeyboardButton("3 kurs" if current_language == "uz" else "3 –∫—É—Ä—Å")
    markup.add(year1_btn, year2_btn, year3_btn)
    bot.send_message(
        chat_id=message.chat.id,
        text=texts[current_language]["choose_course"],
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è 1 –∫—É—Ä—Å–∞
@bot.message_handler(func=lambda message: message.text in ["1 –∫—É—Ä—Å", "1 kurs"])
def handle_year1(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    test1_btn = types.KeyboardButton("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –ê–Ω–∞—Ç–æ–º–∏–∏ 1" if current_language == "ru" else "Anatomiya")
    test2_btn = types.KeyboardButton("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –ì–∏—Å—Ç–æ–ª–æ–≥–∏–∏ 1" if current_language == "ru" else "Gistologiya")
    test3_btn = types.KeyboardButton("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –ë–∏–æ–ª–æ–≥–∏–∏ 1" if current_language == "ru" else "Biologiya")
    test4_btn = types.KeyboardButton("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –ë–∏–æ—Ñ–∏–∑–∏–∫–µ 1" if current_language == "ru" else "Biofizika")
    test5_btn = types.KeyboardButton("---" if current_language == "ru" else "Kimyo")
    exit_btn = types.KeyboardButton("–ù–∞–∑–∞–¥" if current_language == "ru" else "Orqaga")
    markup.add(test1_btn, test2_btn, test3_btn, test4_btn, test5_btn, exit_btn)
    bot.send_message(
        chat_id=message.chat.id,
        text=texts[current_language]["choose_test_1"],
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è 2 –∫—É—Ä—Å–∞
@bot.message_handler(func=lambda message: message.text in ["2 –∫—É—Ä—Å", "2 kurs"])
def handle_year2(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    test1_btn = types.KeyboardButton("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –ë–∏–æ—Ö–∏–º–∏–∏ 2" if current_language == "ru" else "Biokimyo")
    test2_btn = types.KeyboardButton("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –ë–ö–ü 2" if current_language == "ru" else "BKP")
    test3_btn = types.KeyboardButton("---" if current_language == "ru" else "ICP")
    test4_btn = types.KeyboardButton("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –§–∏–∑–∏–æ–ª–æ–≥–∏—è 2" if current_language == "ru" else "Fiziologiya")
    exit_btn = types.KeyboardButton("–ù–∞–∑–∞–¥" if current_language == "ru" else "Orqaga")
    markup.add(test1_btn, test2_btn, test3_btn, test4_btn, exit_btn)
    bot.send_message(
        chat_id=message.chat.id,
        text=texts[current_language]["choose_test_2"],
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è 3 –∫—É—Ä—Å–∞
@bot.message_handler(func=lambda message: message.text in ["3 –∫—É—Ä—Å", "3 kurs"])
def handle_year3(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    pharmacology_btn = types.KeyboardButton("–¢–µ—Å—Ç –ø–æ –§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏–∏ 3" if current_language == "ru" else "Farmakologiya")
    bcp_btn = types.KeyboardButton("–¢–µ—Å—Ç –ø–æ –ë–ö–ü 3" if current_language == "ru" else "BKP3")
    patan_btn = types.KeyboardButton("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –ü–∞—Ç–∞–Ω 3" if current_language == "ru" else "---")
    exit_btn = types.KeyboardButton("–ù–∞–∑–∞–¥" if current_language == "ru" else "Orqaga")
    markup.add(pharmacology_btn, bcp_btn, patan_btn, exit_btn)
    bot.send_message(
        chat_id=message.chat.id,
        text=texts[current_language]["choose_test_3"],
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥/Orqaga"
@bot.message_handler(func=lambda message: message.text in ["–ù–∞–∑–∞–¥", "Orqaga"])
def exit_test(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    year1_btn = types.KeyboardButton("1 kurs" if current_language == "uz" else "1 –∫—É—Ä—Å")
    year2_btn = types.KeyboardButton("2 kurs" if current_language == "uz" else "2 –∫—É—Ä—Å")
    year3_btn = types.KeyboardButton("3 kurs" if current_language == "uz" else "3 –∫—É—Ä—Å")
    markup.add(year1_btn, year2_btn, year3_btn)
    bot.send_message(
        chat_id=message.chat.id,
        text=texts[current_language]["choose_course"],
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ç–µ—Å—Ç–æ–º –≤ —ç—Ç–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–µ 
@bot.message_handler(func=lambda message: message.text == "---")
def handle_no_test(message):
    if current_language == "ru":
        text = "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –≤ —ç—Ç–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–µ —è–∑—ã–∫–∞ –Ω–µ—Ç—É, –æ–∂–∏–¥–∞–π—Ç–µ."
    else:
        text = "Ushbu test joriy til sozlamalarida mavjud emas, iltimos kuting."
    bot.send_message(chat_id=message.chat.id, text=text)


# –ö—É—Ä—Å 1

#–†—É—Å—Å–∫–∏–π

@bot.message_handler(func=lambda message: message.text == "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –ì–∏—Å—Ç–æ–ª–æ–≥–∏–∏ 1")
def start_gistologiya_test_ru(message):
    text = "üìö–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –ø—Ä–∏–º–µ—Ä 30-60. üìù–¢–µ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ 445 –≤–æ–ø—Ä–æ—Å–æ–≤:"
    bot.send_message(chat_id=message.chat.id, text=text)
    file_path = os.path.join('–ö—É—Ä—Å 1 RU', '–ì–∏—Å—Ç–æ–ª–æ–≥–∏—è 1 –∫—É—Ä—Å.json')
    with open(file_path, 'r', encoding='utf-8') as file:
        questions = json.load(file)
    bot.register_next_step_handler(message, set_questions_count, questions)

@bot.message_handler(func=lambda message: message.text == "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –ê–Ω–∞—Ç–æ–º–∏–∏ 1")
def start_anatomy1_test_ru(message):
    text = "üìö–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –ø—Ä–∏–º–µ—Ä 30-60. üìù–¢–µ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ 605 –≤–æ–ø—Ä–æ—Å–æ–≤:"
    bot.send_message(chat_id=message.chat.id, text=text)
    file_path = os.path.join('–ö—É—Ä—Å 1 RU', '–ê–Ω–∞—Ç–æ–º–∏—è 1 –∫—É—Ä—Å.json')
    with open(file_path, 'r', encoding='utf-8') as file:
        questions = json.load(file)
    bot.register_next_step_handler(message, set_questions_count, questions)

@bot.message_handler(func=lambda message: message.text == "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –ë–∏–æ–ª–æ–≥–∏–∏ 1")
def start_biology1_test_ru(message):
    text = "üìö–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –ø—Ä–∏–º–µ—Ä 30-60. üìù–¢–µ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ 615 –≤–æ–ø—Ä–æ—Å–æ–≤:"
    bot.send_message(chat_id=message.chat.id, text=text)
    file_path = os.path.join('–ö—É—Ä—Å 1 RU', '–ë–∏–æ–ª–æ–≥–∏—è 1 –∫—É—Ä—Å.json')
    with open(file_path, 'r', encoding='utf-8-sig') as file:
        questions = json.load(file)
    bot.register_next_step_handler(message, set_questions_count, questions)
    
@bot.message_handler(func=lambda message: message.text == "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –ë–∏–æ—Ñ–∏–∑–∏–∫–µ 1")
def start_biophysics1_test_ru(message):
    text = "üìö–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –ø—Ä–∏–º–µ—Ä 30-60. üìù–¢–µ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ –•–•–• –≤–æ–ø—Ä–æ—Å–æ–≤:"
    bot.send_message(chat_id=message.chat.id, text=text)
    file_path = os.path.join('–ö—É—Ä—Å 1 RU', '–ë–∏–æ—Ñ–∏–∑–∏–∫–∞ 1 –∫—É—Ä—Å.json')
    with open(file_path, 'r', encoding='utf-8') as file:
        questions = json.load(file)
    bot.register_next_step_handler(message, set_questions_count, questions)



# –£–∑–±–µ–∫—Å–∫–∏–π



@bot.message_handler(func=lambda message: message.text == "Gistologiya")
def start_gistologiya_test_uz(message):
    text = "üìöSavollar sonini kiriting, masalan 30-60. üìùTestda 581 ta savol mavjud:"
    bot.send_message(chat_id=message.chat.id, text=text)
    file_path = os.path.join('–ö—É—Ä—Å 1 UZ', '1 kurs gista UZ update.json')
    with open(file_path, 'r', encoding='utf-8-sig') as file:
        questions = json.load(file)
    bot.register_next_step_handler(message, set_questions_count, questions)

@bot.message_handler(func=lambda message: message.text == "Anatomiya")
def start_anatomy1_test_uz(message):
    text = "üìöSavollar sonini kiriting, masalan 30-60. üìùTestda 545 ta savol mavjud:"
    bot.send_message(chat_id=message.chat.id, text=text)
    file_path = os.path.join('–ö—É—Ä—Å 1 UZ', '–∞–Ω–∞—Ç–æ–º–∏—è 1 –∫—É—Ä—Å.json')
    with open(file_path, 'r', encoding='utf-8-sig') as file:
        questions = json.load(file)
    bot.register_next_step_handler(message, set_questions_count, questions)

@bot.message_handler(func=lambda message: message.text == "Biologiya")
def start_biology1_test_uz(message):
    text = "üìöSavollar sonini kiriting, masalan 30-60. üìùTestda 614 ta savol mavjud:"
    bot.send_message(chat_id=message.chat.id, text=text)
    file_path = os.path.join('–ö—É—Ä—Å 1 UZ', 'Biologiya 1 kurs UZ.json')
    with open(file_path, 'r', encoding='utf-8-sig') as file:
        questions = json.load(file)
    bot.register_next_step_handler(message, set_questions_count, questions)

@bot.message_handler(func=lambda message: message.text == "Biofizika")
def start_biophysics1_test_uz(message):
    text = "üìöSavollar sonini kiriting, masalan 30-60. üìùTestda 400 ta savol mavjud:"
    bot.send_message(chat_id=message.chat.id, text=text)
    file_path = os.path.join('–ö—É—Ä—Å 1 UZ', '–ë–∏–æ—Ñ–∏–∑–∏–∫–∞ UZ 1.json')
    with open(file_path, 'r', encoding='utf-8-sig') as file:
        questions = json.load(file)
    bot.register_next_step_handler(message, set_questions_count, questions)

@bot.message_handler(func=lambda message: message.text == "Kimyo")
def start_chemistry1_test_uz(message):
    text = "üìöSavollar sonini kiriting, masalan 30-60. üìùTestda 543 ta savol mavjud:"
    bot.send_message(chat_id=message.chat.id, text=text)
    file_path = os.path.join('–ö—É—Ä—Å 1 UZ', '–•–∏–º–∏—è UZ 1.json')
    with open(file_path, 'r', encoding='utf-8-sig') as file:
        questions = json.load(file)
    bot.register_next_step_handler(message, set_questions_count, questions)



# –ö—É—Ä—Å 2

#–£–∑–±–µ—Ç—Å–∫–∏–π

@bot.message_handler(func=lambda message: message.text == "BKP")
def start_bcp_test_uz(message):
    text = "üìöSavollar sonini kiriting, masalan 30-60. üìùTestda 616 ta savol mavjud:"
    bot.send_message(chat_id=message.chat.id, text=text)
    file_path = os.path.join('–ö—É—Ä—Å 2 UZ', '–ë–ö–ü.json')
    with open(file_path, 'r', encoding='utf-8-sig') as file:
        questions = json.load(file)
    bot.register_next_step_handler(message, set_questions_count, questions)

@bot.message_handler(func=lambda message: message.text == "Fiziologiya")
def start_physiology1_test_uz(message):
    text = "üìöSavollar sonini kiriting, masalan 30-60. üìùTestda 600 ta savol mavjud:"
    bot.send_message(chat_id=message.chat.id, text=text)
    file_path = os.path.join('–ö—É—Ä—Å 2 UZ', '–§–∏–∑–∏–æ–ª–æ–≥–∏—è.json')
    with open(file_path, 'r', encoding='utf-8-sig') as file:
        questions = json.load(file)
    bot.register_next_step_handler(message, set_questions_count, questions)

@bot.message_handler(func=lambda message: message.text == "Biokimyo")
def start_biochemistry_test_uz(message):
    text = "üìöSavollar sonini kiriting, masalan 30-60. üìùTestda 619 ta savol mavjud:"
    bot.send_message(chat_id=message.chat.id, text=text)
    file_path = os.path.join('–ö—É—Ä—Å 2 UZ', '–ë–∏–æ—Ö–∏–º–∏—è.json')
    with open(file_path, 'r', encoding='utf-8-sig') as file:
        questions = json.load(file)
    bot.register_next_step_handler(message, set_questions_count, questions)

@bot.message_handler(func=lambda message: message.text == "ICP")
def start_icp_test_uz(message):
    text = "üìöSavollar sonini kiriting, masalan 30-60. üìùTestda 600 ta savol mavjud:"
    bot.send_message(chat_id=message.chat.id, text=text)
    file_path = os.path.join('–ö—É—Ä—Å 2 UZ', '–ò–ö–ü.json')
    with open(file_path, 'r', encoding='utf-8-sig') as file:
        questions = json.load(file)
    bot.register_next_step_handler(message, set_questions_count, questions)



# –†—É—Å—Å–∫–∏–π
@bot.message_handler(func=lambda message: message.text == "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –ë–ö–ü 2")
def start_bcp_test(message):
    text = "üìö–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç 30 –¥–æ 60. üìù–í —Ç–µ—Å—Ç–µ 616 –≤–æ–ø—Ä–æ—Å–æ–≤:"
    bot.send_message(chat_id=message.chat.id, text=text)
    file_path = os.path.join('–ö—É—Ä—Å 2 RU', '–ë–ö–ü.json')
    with open(file_path, 'r', encoding='utf-8-sig') as file:
        questions = json.load(file)
    bot.register_next_step_handler(message, set_questions_count, questions)
    
@bot.message_handler(func=lambda message: message.text == "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –§–∏–∑–∏–æ–ª–æ–≥–∏—è 2")
def start_physiology_test(message):
    text = "üìö–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç 30 –¥–æ 60. üìù–í —Ç–µ—Å—Ç–µ 600 –≤–æ–ø—Ä–æ—Å–æ–≤:"
    bot.send_message(chat_id=message.chat.id, text=text)
    file_path = os.path.join('–ö—É—Ä—Å 2 RU', '–§–∏–∑–∏–æ–ª–æ–≥–∏—è.json')
    with open(file_path, 'r', encoding='utf-8-sig') as file:
        questions = json.load(file)
    bot.register_next_step_handler(message, set_questions_count, questions)

@bot.message_handler(func=lambda message: message.text == "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –ë–∏–æ—Ö–∏–º–∏–∏ 2")
def start_biochemistry_test(message):
    text = "üìö–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç 30 –¥–æ 60. üìù–í —Ç–µ—Å—Ç–µ 620 –≤–æ–ø—Ä–æ—Å–æ–≤:"
    bot.send_message(chat_id=message.chat.id, text=text)
    file_path = os.path.join('–ö—É—Ä—Å 2 RU', '–ë–∏–æ—Ö–∏–º–∏—è 2 –∫—É—Ä—Å –†—É.json')
    with open(file_path, 'r', encoding='utf-8-sig') as file:
        questions = json.load(file)
    bot.register_next_step_handler(message, set_questions_count, questions)



# –ö—É—Ä—Å 3

# –†—É—Å—Å–∫–∏–π

@bot.message_handler(func=lambda message: message.text == "–¢–µ—Å—Ç –ø–æ –ë–ö–ü 3")
def start_bcp_test(message):
    text = "üìö–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç 30 –¥–æ 60. üìù–í —Ç–µ—Å—Ç–µ 616 –≤–æ–ø—Ä–æ—Å–æ–≤:"
    bot.send_message(chat_id=message.chat.id, text=text)
    file_path = os.path.join('–ö—É—Ä—Å 3 RU', '–ë–ö–ü.json')
    with open(file_path, 'r', encoding='utf-8-sig') as file:
        questions = json.load(file)
    bot.register_next_step_handler(message, set_questions_count, questions)

@bot.message_handler(func=lambda message: message.text == "–¢–µ—Å—Ç –ø–æ –§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏–∏ 3")
def start_physiology_test(message):
    text = "üìö–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç 30 –¥–æ 60. üìù–í —Ç–µ—Å—Ç–µ 600 –≤–æ–ø—Ä–æ—Å–æ–≤:"
    bot.send_message(chat_id=message.chat.id, text=text)
    file_path = os.path.join('–ö—É—Ä—Å 3 RU', '–§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è.json')
    with open(file_path, 'r', encoding='utf-8-sig') as file:
        questions = json.load(file)
    bot.register_next_step_handler(message, set_questions_count, questions)
    
@bot.message_handler(func=lambda message: message.text == "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –ü–∞—Ç–∞–Ω 3")
def start_patan3_test(message):
    text = "üìö–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç 30 –¥–æ 60. üìù–í —Ç–µ—Å—Ç–µ 748 –≤–æ–ø—Ä–æ—Å–æ–≤:"
    bot.send_message(chat_id=message.chat.id, text=text)
    file_path = os.path.join('–ö—É—Ä—Å 3 RU', '–ü–∞—Ç–∞–Ω.json')
    with open(file_path, 'r', encoding='utf-8-sig') as file:
        questions = json.load(file)
    bot.register_next_step_handler(message, set_questions_count, questions)

# –£–∑–±–µ—Ç—Å–∫–∏–π



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
def set_questions_count(message, questions):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if message.text == ("–ù–∞–∑–∞–¥" if current_language == "ru" else "Orqaga"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        russian_btn = types.KeyboardButton("–†—É—Å—Å–∫–∏–π")
        uzbek_btn = types.KeyboardButton("O'zbek")
        markup.add(russian_btn, uzbek_btn)
        msg = bot.send_message(
            chat_id=message.chat.id,
            text=("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫" if current_language == "ru" else "Tilni tanlang:"),
            reply_markup=markup
        )
        bot.register_next_step_handler(msg, send_welcome)
        return
    try:
        count_range = message.text.split('-')
        start = int(count_range[0])
        end = int(count_range[1])
        if 1 <= start <= end <= 750:
            user_id = message.chat.id
            user_results[user_id] = {
                "current_question": 0,
                "total_questions": end - start + 1,
                "questions": [questions[i - 1] for i in range(start, end + 1)]
            }
            send_question(message.chat.id)
        else:
            bot.send_message(message.chat.id, ("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 30." if current_language == "ru" else "Noto'g'ri formatda kiritildi. Iltimos, 1 dan 30 gacha raqam kiriting."))
            bot.register_next_step_handler(message, set_questions_count, questions)
    except (ValueError, IndexError):
        bot.send_message(message.chat.id, ("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 30." if current_language == "ru" else "Noto'g'ri formatda kiritildi. Iltimos, 1 dan 30 gacha raqam kiriting."))
        bot.register_next_step_handler(message, set_questions_count, questions)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
def send_question(chat_id):
    user_id = chat_id
    current_question = user_results[user_id]["current_question"]
    question = user_results[user_id]["questions"][current_question]

    options = question["Options"] + question["Answers"]
    random.shuffle(options)  # –†–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
    options_text = "\n".join([f"{i + 1}. {option}" for i, option in enumerate(options)])
    message_text = f"{question['Number']}. {question['Text']}\n{options_text}"

    bot.send_message(chat_id, message_text)

    user_results[user_id]["current_options"] = options

    
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: message.chat.id in user_results)
def handle_answer(message):
    user_id = message.chat.id
    question_index = user_results[user_id]["current_question"]
    question = user_results[user_id]["questions"][question_index]
    options = user_results[user_id]["current_options"]
    correct_answers = [answer.lower() for answer in question["Answers"]]

    user_answers = message.text.strip().lower().split()
    parsed_answers = []
    for answer in user_answers:
        try:
            answer_index = int(answer) - 1
            if 0 <= answer_index < len(options):
                parsed_answers.append(options[answer_index].lower())
        except ValueError:
            parsed_answers.append(answer)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤
    correct_count = sum(1 for answer in parsed_answers if answer in correct_answers)
    score = calculate_score(len(correct_answers), correct_count)
    user_results[user_id]["score"] = user_results[user_id].get("score", 0) + score

    if correct_count == len(correct_answers):
        bot.send_message(chat_id=user_id, text=f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! ‚úÖ")
    elif correct_count == 0:
        bot.send_message(chat_id=user_id, text=f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –í—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –±–∞–ª–ª–æ–≤.‚ùå")
        bot.send_message(chat_id=user_id, text=f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {', '.join(correct_answers)}")
    else:
        bot.send_message(chat_id=user_id, text=f"–í—ã –≤–≤–µ–ª–∏ {correct_count} –∏–∑ {len(correct_answers)} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤üí°")
        bot.send_message(chat_id=user_id, text=f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {', '.join(correct_answers)}")

    user_results[user_id]["current_question"] += 1
    user_results[user_id]["questions"][question_index]["user_answers"] = parsed_answers

    if user_results[user_id]["current_question"] < user_results[user_id]["total_questions"]:
        send_question(user_id)
    else:
        total_score = user_results[user_id]["score"]
        max_score = user_results[user_id]["total_questions"] * 3.3
        percentage = (total_score / max_score) * 100
        result_message = f"üèÅ–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\nüìù–í–∞—à –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª: {total_score:.2f}/{max_score} ({percentage:.2f})"

        correct_count = sum(1 for question in user_results[user_id]["questions"] if set(question.get("user_answers", [])) == set([ans.lower() for ans in question["Answers"]]))
        incorrect_count = user_results[user_id]["total_questions"] - correct_count
        result_message += f"\n\n‚úÖ–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_count}\n‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {incorrect_count}"
        
        bot.send_message(chat_id=user_id, text=result_message)
        user_results.pop(user_id, None)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –±–∞–ª–ª–æ–≤ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
def calculate_score(correct_answers_count, correct_count):
    if correct_answers_count == 1:
        return 3.3 if correct_count == 1 else 0
    else:
        score_per_answer = 3.3 / correct_answers_count
        return round(score_per_answer * correct_count, 2)
    
# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.polling()
